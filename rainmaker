#!/usr/bin/env python3
#
# Copyright 2019 Espressif Systems (Shanghai) PTE LTD
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
 
import argparse
import json, re
import requests
from requests.exceptions import HTTPError
from node import *
from user import signup, login
from provision import provision
from cert_provision import claim

def main():

    parser = argparse.ArgumentParser()
    parser.set_defaults(func=None)
    subparsers = parser.add_subparsers(help='Functions')

    signup_parser = subparsers.add_parser("signup", help="User signup to the ESP Rainmaker")
    signup_parser.add_argument('email', type=str, help='Email address of the user')
    signup_parser.set_defaults(func=signup)

    login_parser = subparsers.add_parser("login", help="User login to the ESP Rainmaker")
    login_parser.add_argument('--email', type=str, help='Email address of the user')
    login_parser.set_defaults(func=login)

    getnodeconfig_parser = subparsers.add_parser('getnodeconfig', help='Shows the configuration of the node')
    getnodeconfig_parser.add_argument('nodeId', type=str, help='Node Id for the node')
    getnodeconfig_parser.set_defaults(func=getNodeConfig)

    getnodes_parser = subparsers.add_parser('getnodes', help='List all nodes associated with the user')
    getnodes_parser.set_defaults(func=getNodes)

    setparams_parser = subparsers.add_parser('setparams', help='Sets the desired state of the node')
    setparams_parser.add_argument('nodeid', help='Node ID for the node')
    setparams_parser.add_argument('--filepath', help='Path of the json file conatining parameters to be set')
    setparams_parser.add_argument('--data', help='Json data containing parameters to be set. Note: Enter the data in single inverted quotes')
    setparams_parser.set_defaults(func=setParams)
    
    getparams_parser = subparsers.add_parser('getparams', help='Shows the reported state of the node')
    getparams_parser.add_argument('nodeId', type=str, help='Node Id for the node')
    getparams_parser.set_defaults(func=getParams)
    
    provision_parser = subparsers.add_parser('provision', help='Does the provisioning of the node')
    provision_parser.add_argument('pop', type=str, help='Proof of possesion for the node')
    provision_parser.add_argument('--ssid', type=str, help='Wi-Fi of the network')
    provision_parser.set_defaults(func=provision)

    claim_parser = subparsers.add_parser('claim', help='Claim your ESP32-S2 with ESP claim')
    parser.add_argument("--verbose", 
                        help='Enable/Disable the verbose debugging logs.', action = 'store_true')
    claim_parser.add_argument("--port", 
                    help='Serial Port connected to the device.', default='/dev/ttyUSB0')
    claim_parser.add_argument("--certAddr", help='Starting address of the certificates in flash.',
                    default='0xd000')
    claim_parser.set_defaults(func=claim)

    getmqtthost_parser = subparsers.add_parser('getmqtthost', help='Gives the IOT endpoint')
    getmqtthost_parser.set_defaults(func=getMqttHost)

    args = parser.parse_args()
    
    if args.func is not None:
        args.func(args)
    else:
        parser.print_help()

if __name__ == '__main__':
    main()